version: '3.8'

services:
  # PostgreSQL baza podataka
  postgres:
    image: postgres:15-alpine
    container_name: film_catalog_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: film_catalog
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - film-catalog-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d film_catalog"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Spring Boot aplikacija
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/film-catalog-*.jar
    container_name: film_catalog_app
    restart: unless-stopped
    environment:
      # Spring profil za Docker
      SPRING_PROFILES_ACTIVE: docker

      # Database connection
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/film_catalog
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password

      # JPA/Hibernate settings
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false

      # Flyway settings
      SPRING_FLYWAY_ENABLED: true
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: true

      # Logging
      LOGGING_LEVEL_COM_EXAMPLE_FILMCATALOG: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: WARN

      # Server settings
      SERVER_PORT: 8080

      # OpenAPI settings
      SPRINGDOC_SWAGGER_UI_ENABLED: true

      # Java memory settings
      JAVA_OPTS: "-Xmx512m -Xms256m"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - film-catalog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - app_logs:/app/logs

  # pgAdmin za upravljanje bazom podataka (opcionalno)
  pgadmin:
    image: dpage/pgadmin4:7
    container_name: film_catalog_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@filmcatalog.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - film-catalog-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    profiles:
      - admin

  # Redis za caching (opcionalno, za buduće proširenje)
  redis:
    image: redis:7-alpine
    container_name: film_catalog_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - film-catalog-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    profiles:
      - cache

  # Prometheus za monitoring (opcionalno)
  prometheus:
    image: prom/prometheus:latest
    container_name: film_catalog_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - film-catalog-network
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana za vizualizaciju (opcionalno)
  grafana:
    image: grafana/grafana:latest
    container_name: film_catalog_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - film-catalog-network
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Mreže
networks:
  film-catalog-network:
    driver: bridge
    name: film-catalog-network

# Volumeni za perzistentno čuvanje podataka
volumes:
  postgres_data:
    name: film_catalog_postgres_data
  pgadmin_data:
    name: film_catalog_pgadmin_data
  redis_data:
    name: film_catalog_redis_data
  prometheus_data:
    name: film_catalog_prometheus_data
  grafana_data:
    name: film_catalog_grafana_data
  app_logs:
    name: film_catalog_app_logs